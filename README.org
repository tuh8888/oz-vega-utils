#+title: oz-vega-utils
#+author: Harrison Pielke-Lombardo

* About
  This package defines convenience functions for creating and manipulating [[https://vega.github.io/vega/examples/][Vega]] visualization specifications in Clojure. It is built on top of [[https://github.com/metasoarous/oz][metasoarous/oz]].

* Visualization types
  - Default =oz-vega-utils.core=
  - Force directed layout =oz-vega-utils.force-directed-layout=

* Usage

* Example

** Setup
   First we require namespaces and load some data.

  The data here has the form:
  - nodes
    - name
    - id
  - links
    - source
    - target
    - value

  #+BEGIN_SRC clojure

(require
  '[oz-vega-utils.core :as ovu]
  '[oz-vega-utils.util :as util]
  '[oz-vega-utils.force-directed-layout :as fdl]
  '[oz.core :as oz])

(def data (oz/load "https://github.com/vega/vega/raw/master/docs/data/miserables.json"))


 #+END_SRC

** Make specification
   Next we make a default vega specification.

  #+BEGIN_SRC clojure

(def width 1200)

(def height 500)

(def canvas {:width       width
             :height      height
             :description "A node-link diagram with force-directed layout, depicting character co-occurrence in the novel Les MisÃ©rables."})

(def vega (ovu/vega-template canvas))

  #+END_SRC

** Make force layout
   Now we add our nodes and links form our data to the specification.

   Nodes are added to the marks as =symbol= marks and the links are added as =path= marks.

   The force simulation defines a transformation on the marks according to forces which we will add later. The simulation can be static or dynamic and this is determined by the =:static= parameter. Parameters like this can either be provided as a single value (e.g. =true= or =false= in the case of this =:static= parameter which is boolean) or as a map with an initial value. If a map is provided, an input signal will be created with a corresponding UI for dynamically changing the value of that parameter. For the =:static= parameter, this will be a checkbox. If a value is provided instead of a map, no UI will be created.

   #+BEGIN_SRC clojure

(def force-layout (-> vega
                    (fdl/add-nodes :nodes (:nodes data) :radius {:init 8})
                    (fdl/add-links :links (:links data))
                    (fdl/add-force-sim :nodes :links {:iterations 300
                                                      :shape      :line
                                                      :static     {:init false}})))

(def draggable-layout (-> force-layout
                        (fdl/add-node-dragging :nodes :links)))

(def labeled-layout (-> draggable-layout
                      (fdl/add-node-labels :nodes :name)
                      (fdl/add-link-labels :links :value)))

(def colored-layout (-> labeled-layout

                      (ovu/add-colors :nodes {:type   :ordinal
                                              :data   :nodes_data
                                              :field  :group
                                              :stroke "white"})
                      (ovu/add-colors :links {:type        :static
                                              :strokeWidth 0.5
                                              :stroke      "#ccc"})
                      (ovu/add-colors :nodes_labels {:type   :static
                                                     :stroke "black"})
                      (ovu/add-colors :links_labels {:type   :static
                                                     :stroke "red"})))

(def vega-with-forces (-> colored-layout
                        (fdl/add-force :nodes :collide
                          {:radius   {:name (ovu/prop-sym :nodes :radius)
                                      :init 10 :min 1 :max 50}
                           :strength {:init 0.7 :min 0.1 :max 1 :step 0.1}})
                        (fdl/add-force :nodes :nbody
                          {:strength        {:init -30 :min -100 :max 10}
                           :theta           {:init 0.9 :min 0.1 :max 1 :step 0.1}
                           #_#_:distanceMin {:init 1 :min 0 :max 100}
                           #_#_:distanceMax {:init 1 :min 0 :max 100}})
                        (fdl/add-force :nodes :link
                          {:links        :links_data
                           :distance     {:init 30 :min 5 :max 100}
                           #_#_:strength {:init 0.7 :min 0.1 :max 1 :step 0.1}})
                        (fdl/add-force :nodes :center
                          {:x {:init (/ width 2)}
                           :y {:init (/ height 2)}})))

(def vega-with-gravity (-> vega-with-forces

                         (fdl/add-group-gravity :nodes {:axis     :x
                                                        :field    :group
                                                        :strength {:init 0.1 :min 0.1 :max 1 :step 0.1}})
                         (fdl/add-group-gravity :nodes {:axis     :y
                                                        :field    :group
                                                        :strength {:init 0.5 :min 0.1 :max 2 :step 0.2}})))
(oz/view! vega-with-gravity :mode :vega)
   #+END_SRC
